{"version":3,"sources":["components/Card.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["cardStyle","height","width","float","imgContainerStyle","overflow","textAlign","backgroundSize","imgStyle","display","margin","paddingTop","Card","props","react_default","a","createElement","style","onClick","cardClicked","id","alt","name","src","image","tableStyle","backgroundColor","minHeight","flexDirection","alignItems","justifyContent","color","fontSize","tdStyle","h4Style","Header","children","message","score","highscore","App","state","cards","newGame","_this","setState","forEach","card","count","find","cardToMatch","i","this","sort","Math","random","_this2","Fragment","components_Header","className","map","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0/CAUMA,EAAY,CAChBC,OAAQ,QACRC,MAAO,QACPC,MAAO,QAGHC,EAAoB,CACxBH,OAAQ,OACRI,SAAU,SACVC,UAAW,SACXC,eAAgB,QAGZC,EAAY,CAChBC,QAAS,QACPC,OAAQ,OACRC,WAAY,OACdT,MAAO,OAGMU,EA5BF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,MAAOjB,EAAWkB,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,MAC5DN,EAAAC,EAAAC,cAAA,OAAKC,MAAOb,GACVU,EAAAC,EAAAC,cAAA,OAAKC,MAAOT,EAAUa,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,WCWlDC,EAAa,CACnBC,gBAAiB,UACjBC,UAAW,OACXlB,QAAS,OACTmB,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,MAAO,UACPC,SAAU,QAEJC,EAAU,CACd3B,UAAW,SACXJ,MAAO,SAEHgC,EAAU,CACdH,MAAO,UACPzB,UAAW,SACXI,OAAQ,OAEKyB,EAjCA,SAAAtB,GAAK,OAClBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,MAAOQ,GACZX,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,MAAOgB,GAAUpB,EAAMuB,UAC3BtB,EAAAC,EAAAC,cAAA,MAAIC,MAAOgB,GAAUpB,EAAMwB,SAC3BvB,EAAAC,EAAAC,cAAA,MAAIC,MAAOgB,GAAX,UAA4BpB,EAAMyB,MAAlC,eAAqDzB,EAAM0B,cAIjEzB,EAAAC,EAAAC,cAAA,MAAIC,MAAOiB,GAAX,oFCqDWM,oNA3DbC,MAAQ,CACNC,QACAJ,MAAO,EACPC,UAAW,EACXF,QAAS,6BAGXM,QAAU,WACRC,EAAKC,SAAS,CAAEP,MAAO,IACvBM,EAAKH,MAAMC,MAAMI,QAAQ,SAAAC,GAAUA,EAAKC,MAAQ,OAGlD7B,YAAc,SAAAC,GACZwB,EAAKH,MAAMC,MAAMO,KAAK,SAACC,EAAaC,GAClC,OAAID,EAAY9B,KAAOA,EACE,IAAnBsB,EAAMS,GAAGH,OACXN,EAAMS,GAAGH,MAAQN,EAAMS,GAAGH,MAAQ,EAClCJ,EAAKC,SAAS,CAAEP,MAAOM,EAAKH,MAAMH,MAAQ,EAAGD,QAAS,YAAc,WAC9De,KAAKX,MAAMH,MAAQc,KAAKX,MAAMF,YAChCa,KAAKP,SAAS,CAAEN,UAAWa,KAAKX,MAAMH,QACb,KAArBc,KAAKX,MAAMH,OAAcc,KAAKP,SAAS,CAAER,QAAS,gBAG1DO,EAAKH,MAAMC,MAAMW,KAAK,kBAAMC,KAAKC,SAAW,MACrC,IAEPX,EAAKC,SAAS,CAAER,QAAS,cACzBO,EAAKD,WACE,GAEF,gFAIJ,IAAAa,EAAAJ,KACP,OACEtC,EAAAC,EAAAC,cAACF,EAAAC,EAAM0C,SAAP,KACE3C,EAAAC,EAAAC,cAAC0C,EAAD,CACEpB,MAAOc,KAAKX,MAAMH,MAClBC,UAAWa,KAAKX,MAAMF,UACtBF,QAASe,KAAKX,MAAMJ,SAHtB,UAOAvB,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,aACZP,KAAKX,MAAMC,MAAMkB,IAAI,SAAAb,GAAI,OACxBjC,EAAAC,EAAAC,cAAC6C,EAAD,CACE1C,YAAaqC,EAAKrC,YAClBC,GAAI2B,EAAK3B,GACT0C,IAAKf,EAAK3B,GACVI,MAAOuB,EAAKvB,mBAnDRuC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7f187dbb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = props => (\n  <div style={cardStyle} onClick={() => props.cardClicked(props.id)}>\n    <div style={imgContainerStyle}>\n      <img style={imgStyle} alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nconst cardStyle = {\n  height: \"275px\",\n  width: \"275px\",\n  float: \"left\"\n}\n\nconst imgContainerStyle = {\n  height: \"100%\",\n  overflow: \"hidden\",\n  textAlign: \"center\",\n  backgroundSize: \"100%\"\n}\n\nconst imgStyle  = {\n  display: \"block\",\n    margin: \"auto\",\n    paddingTop: \"30px\",\n  width: \"75%\"\n}\n\nexport default Card;","import React from \"react\";\n\nconst Header = props => (\n  <div>\n    <table style={tableStyle}>\n      <tbody>\n        <tr>\n          <td style={tdStyle}>{props.children}</td>\n          <td style={tdStyle}>{props.message}</td>\n          <td style={tdStyle}>Score: {props.score} Highscore: {props.highscore}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 style={h4Style}>Click on an image to earn points, but don't click the same image twice!</h4>\n  </div>\n);\nconst tableStyle = {\nbackgroundColor: \"#282c34\",\nminHeight: \"20vh\",\ndisplay: \"flex\",\nflexDirection: 'column',\nalignItems: 'center',\njustifyContent: 'center',\ncolor: '#F3F3F3',\nfontSize: '2rem'\n}\nconst tdStyle = {\n  textAlign: 'center',\n  width: '33.3%'\n}\nconst h4Style = {\n  color: \"#282c34\",\n  textAlign: 'center',\n  margin: '5px'\n}\nexport default Header;","import React, { Component } from \"react\";\nimport Card from \"./components/Card.js\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    highscore: 0,\n    message: 'Click an Image to Begin'\n  };\n\n  newGame = () => {\n    this.setState({ score: 0 });\n    this.state.cards.forEach(card => { card.count = 0; })\n  }\n\n  cardClicked = id => {\n    this.state.cards.find((cardToMatch, i) => {\n      if (cardToMatch.id === id) {\n        if (cards[i].count === 0) {\n          cards[i].count = cards[i].count + 1;\n          this.setState({ score: this.state.score + 1, message: \"Correct!\" }, function () {\n            if (this.state.score > this.state.highscore) {\n              this.setState({ highscore: this.state.score });\n              if (this.state.score === 12) this.setState({ message: \"You Win!\" });\n            };\n          });\n          this.state.cards.sort(() => Math.random() - .5)\n          return true;\n        } else {\n          this.setState({ message: \"You Lose!\" });\n          this.newGame();\n          return false;\n        }\n      } return null;\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header\n          score={this.state.score}\n          highscore={this.state.highscore}\n          message={this.state.message}\n        >\n          MEMORY\n        </Header>\n        <div className=\"container\">\n          {this.state.cards.map(card => (\n            <Card\n              cardClicked={this.cardClicked}\n              id={card.id}\n              key={card.id}\n              image={card.image}\n            />\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}